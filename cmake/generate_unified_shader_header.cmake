# CMake script to generate unified shader header
# Usage: cmake -DSHADER_SOURCE_DIR=<dir> -DSHADER_OUT_DIR=<dir> -DOUTPUT_FILE=<file> -P generate_unified_shader_header.cmake

if(NOT SHADER_SOURCE_DIR)
    message(FATAL_ERROR "SHADER_SOURCE_DIR must be specified")
endif()

if(NOT SHADER_OUT_DIR)
    message(FATAL_ERROR "SHADER_OUT_DIR must be specified")
endif()

if(NOT OUTPUT_FILE)
    message(FATAL_ERROR "OUTPUT_FILE must be specified")
endif()

# Convert to absolute paths
get_filename_component(SHADER_SOURCE_DIR "${SHADER_SOURCE_DIR}" ABSOLUTE)
get_filename_component(SHADER_OUT_DIR "${SHADER_OUT_DIR}" ABSOLUTE)
get_filename_component(OUTPUT_FILE "${OUTPUT_FILE}" ABSOLUTE)

# Create output directory if it doesn't exist
get_filename_component(OUTPUT_DIR "${OUTPUT_FILE}" DIRECTORY)
file(MAKE_DIRECTORY "${OUTPUT_DIR}")

# Start writing the header file
file(WRITE "${OUTPUT_FILE}" "// Auto-generated unified shader header\n")
file(APPEND "${OUTPUT_FILE}" "// Generated by CMake script: generate_unified_shader_header.cmake\n")
file(APPEND "${OUTPUT_FILE}" "#pragma once\n\n")
file(APPEND "${OUTPUT_FILE}" "#include <cstdint>\n")
file(APPEND "${OUTPUT_FILE}" "#include <unordered_map>\n")
file(APPEND "${OUTPUT_FILE}" "#include <string>\n")
file(APPEND "${OUTPUT_FILE}" "#include <vector>\n\n")

# Find only vertex and fragment shader source files (exclude varying.def.sc)
file(GLOB VS_SOURCES "${SHADER_SOURCE_DIR}/vs_*.sc")
file(GLOB FS_SOURCES "${SHADER_SOURCE_DIR}/fs_*.sc")
set(SHADER_SOURCES ${VS_SOURCES} ${FS_SOURCES})

# Generate list of expected shader headers based on source files
set(SHADER_HEADERS "")
foreach(SOURCE_FILE ${SHADER_SOURCES})
    get_filename_component(SHADER_NAME "${SOURCE_FILE}" NAME_WE)

    # For each platform, add the expected header file
    set(AVAILABLE_PLATFORMS "dx10" "dx11" "glsl" "essl" "spirv")
    foreach(PLATFORM ${AVAILABLE_PLATFORMS})
        set(HEADER_PATH "${SHADER_OUT_DIR}/${PLATFORM}/${SHADER_NAME}.sc.bin.h")
        list(APPEND SHADER_HEADERS "${HEADER_PATH}")
    endforeach()
endforeach()



if(NOT SHADER_SOURCES)
    message(WARNING "No shader source files found in ${SHADER_SOURCE_DIR}")
    file(APPEND "${OUTPUT_FILE}" "// No shader sources found\n")
    return()
endif()

message(STATUS "Found ${CMAKE_MATCH_COUNT} shader source files")
message(STATUS "Generating headers for platforms: dx10, dx11, glsl, essl, spirv")

# Group headers by platform (only include platforms that bgfx actually compiles)
set(PLATFORMS "dx10" "dx11" "glsl" "essl" "spirv")
set(PLATFORM_NAMES "DirectX 10" "DirectX 11" "OpenGL" "OpenGL ES" "Vulkan/SPIR-V")

list(LENGTH PLATFORMS PLATFORM_COUNT)
math(EXPR PLATFORM_COUNT "${PLATFORM_COUNT} - 1")

foreach(INDEX RANGE ${PLATFORM_COUNT})
    list(GET PLATFORMS ${INDEX} PLATFORM)
    list(GET PLATFORM_NAMES ${INDEX} PLATFORM_NAME)
    
    # Find headers for this platform
    set(PLATFORM_HEADERS "")
    foreach(HEADER ${SHADER_HEADERS})
        string(FIND "${HEADER}" "/${PLATFORM}/" PLATFORM_POS)
        string(FIND "${HEADER}" "\\${PLATFORM}\\" PLATFORM_POS_WIN)
        if(NOT PLATFORM_POS EQUAL -1 OR NOT PLATFORM_POS_WIN EQUAL -1)
            list(APPEND PLATFORM_HEADERS "${HEADER}")
        endif()
    endforeach()

    # Add headers for this platform based on source files
    set(PLATFORM_HAS_SHADERS FALSE)
    foreach(SOURCE_FILE ${SHADER_SOURCES})
        get_filename_component(SHADER_NAME "${SOURCE_FILE}" NAME_WE)
        set(HEADER_PATH "${SHADER_OUT_DIR}/${PLATFORM}/${SHADER_NAME}.sc.bin.h")

        # Check if this header should exist (we generate includes regardless)
        set(PLATFORM_HAS_SHADERS TRUE)
    endforeach()

    if(PLATFORM_HAS_SHADERS)
        file(APPEND "${OUTPUT_FILE}" "// ${PLATFORM_NAME} shaders\n")

        foreach(SOURCE_FILE ${SHADER_SOURCES})
            get_filename_component(SHADER_NAME "${SOURCE_FILE}" NAME_WE)
            # Generate relative path for include
            set(REL_PATH "${PLATFORM}/${SHADER_NAME}.sc.bin.h")
            file(APPEND "${OUTPUT_FILE}" "#include \"${REL_PATH}\"\n")
        endforeach()

        file(APPEND "${OUTPUT_FILE}" "\n")
    endif()
endforeach()

# Generate shader data structure and lookup functions
file(APPEND "${OUTPUT_FILE}" "\n// Shader data structure\n")
file(APPEND "${OUTPUT_FILE}" "struct ShaderData {\n")
file(APPEND "${OUTPUT_FILE}" "    const uint8_t* data;\n")
file(APPEND "${OUTPUT_FILE}" "    uint32_t size;\n")
file(APPEND "${OUTPUT_FILE}" "};\n\n")

file(APPEND "${OUTPUT_FILE}" "// Shader lookup function\n")
file(APPEND "${OUTPUT_FILE}" "inline ShaderData getShaderData(const std::string& shaderName, const std::string& platform) {\n")
file(APPEND "${OUTPUT_FILE}" "    static const std::unordered_map<std::string, ShaderData> shaderMap = {\n")

# Generate shader map entries based on source files
foreach(SOURCE_FILE ${SHADER_SOURCES})
    get_filename_component(SHADER_NAME "${SOURCE_FILE}" NAME_WE)

    # For each platform, generate map entry
    set(AVAILABLE_PLATFORMS "dx10" "dx11" "glsl" "essl" "spirv")
    foreach(PLATFORM ${AVAILABLE_PLATFORMS})
        # Generate array name (e.g., vs_simple_dx11)
        # Special case for spirv -> spv
        if(PLATFORM STREQUAL "spirv")
            set(PLATFORM_SUFFIX "spv")
        else()
            set(PLATFORM_SUFFIX "${PLATFORM}")
        endif()
        set(ARRAY_NAME "${SHADER_NAME}_${PLATFORM_SUFFIX}")

        # Generate map key (e.g., "vs_simple:dx11")
        set(MAP_KEY "${SHADER_NAME}:${PLATFORM}")

        file(APPEND "${OUTPUT_FILE}" "        {\"${MAP_KEY}\", {${ARRAY_NAME}, sizeof(${ARRAY_NAME})}},\n")
    endforeach()
endforeach()

file(APPEND "${OUTPUT_FILE}" "    };\n")
file(APPEND "${OUTPUT_FILE}" "    \n")
file(APPEND "${OUTPUT_FILE}" "    std::string key = shaderName + \":\" + platform;\n")
file(APPEND "${OUTPUT_FILE}" "    auto it = shaderMap.find(key);\n")
file(APPEND "${OUTPUT_FILE}" "    if (it != shaderMap.end()) {\n")
file(APPEND "${OUTPUT_FILE}" "        return it->second;\n")
file(APPEND "${OUTPUT_FILE}" "    }\n")
file(APPEND "${OUTPUT_FILE}" "    return {nullptr, 0}; // Shader not found\n")
file(APPEND "${OUTPUT_FILE}" "}\n\n")

file(APPEND "${OUTPUT_FILE}" "// Convenience function to get available platforms for a shader\n")
file(APPEND "${OUTPUT_FILE}" "inline std::vector<std::string> getAvailablePlatforms(const std::string& shaderName) {\n")
file(APPEND "${OUTPUT_FILE}" "    std::vector<std::string> platforms;\n")
file(APPEND "${OUTPUT_FILE}" "    const std::vector<std::string> allPlatforms = {\"dx10\", \"dx11\", \"glsl\", \"essl\", \"spirv\"};\n")
file(APPEND "${OUTPUT_FILE}" "    \n")
file(APPEND "${OUTPUT_FILE}" "    for (const auto& platform : allPlatforms) {\n")
file(APPEND "${OUTPUT_FILE}" "        ShaderData data = getShaderData(shaderName, platform);\n")
file(APPEND "${OUTPUT_FILE}" "        if (data.data != nullptr) {\n")
file(APPEND "${OUTPUT_FILE}" "            platforms.push_back(platform);\n")
file(APPEND "${OUTPUT_FILE}" "        }\n")
file(APPEND "${OUTPUT_FILE}" "    }\n")
file(APPEND "${OUTPUT_FILE}" "    return platforms;\n")
file(APPEND "${OUTPUT_FILE}" "}\n")

list(LENGTH SHADER_HEADERS HEADER_COUNT)
message(STATUS "Generated unified shader header: ${OUTPUT_FILE}")
message(STATUS "Included ${HEADER_COUNT} shader headers")
